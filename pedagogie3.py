# Extension FruitVision V3 - Int√©gration d'images r√©elles
# Cette extension ajoute la capacit√© de traiter de vraies images upload√©es par l'utilisateur

import streamlit as st
import numpy as np
from PIL import Image, ImageFilter, ImageEnhance
import io
import base64
import cv2

def apply_preprocessing_filters(image):
    """Applique les filtres de pr√©processing avec PIL"""
    # Redimensionner √† 100x100
    processed = image.resize((100, 100), Image.Resampling.LANCZOS)
    
    # Normalisation visuelle (simulation)
    enhancer = ImageEnhance.Brightness(processed)
    processed = enhancer.enhance(1.2)
    
    enhancer = ImageEnhance.Contrast(processed)
    processed = enhancer.enhance(1.1)
    
    return processed

def apply_edge_detection(image):
    """Simule la d√©tection de bords avec PIL"""
    # Convertir en niveaux de gris
    gray = image.convert('L')
    
    # Appliquer un filtre de d√©tection de bords
    edges = gray.filter(ImageFilter.FIND_EDGES)
    
    # Convertir en RGB pour l'affichage
    edges_rgb = Image.new('RGB', edges.size)
    edges_rgb.paste(edges)
    
    return edges_rgb

def apply_feature_enhancement(image):
    """Simule l'am√©lioration des caract√©ristiques"""
    # Augmenter la saturation
    enhancer = ImageEnhance.Color(image)
    enhanced = enhancer.enhance(1.8)
    
    # Augmenter le contraste
    enhancer = ImageEnhance.Contrast(enhanced)
    enhanced = enhancer.enhance(1.4)
    
    return enhanced

def simulate_classification_confidence(image):
    """Simule une analyse de confiance bas√©e sur les couleurs dominantes"""
    # Analyser les couleurs dominantes pour simuler une pr√©diction
    img_array = np.array(image)
    
    # Calculer les moyennes RGB
    mean_rgb = np.mean(img_array, axis=(0, 1))
    
    # Logique simplifi√©e bas√©e sur les couleurs
    if mean_rgb[0] > mean_rgb[1] and mean_rgb[0] > mean_rgb[2]:  # Plus de rouge
        return {"Pomme": 85.3, "Tomate": 12.1, "Banane": 1.8, "Concombre": 0.5, "Citron": 0.3}
    elif mean_rgb[1] > mean_rgb[0] and mean_rgb[1] > mean_rgb[2]:  # Plus de vert
        return {"Concombre": 78.9, "Pomme": 15.2, "Citron": 4.1, "Banane": 1.5, "Tomate": 0.3}
    elif mean_rgb[1] > 150 and mean_rgb[0] > 150:  # Jaune
        return {"Banane": 82.7, "Citron": 14.3, "Pomme": 2.1, "Tomate": 0.7, "Concombre": 0.2}
    else:
        return {"Pomme": 94.7, "Banane": 3.2, "Tomate": 1.8, "Concombre": 0.2, "Citron": 0.1}

def image_to_base64(img):
    """Convertit une image PIL en base64 pour l'affichage"""
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return f"data:image/png;base64,{img_str}"

def create_side_by_side_comparison(original_img, processed_img, stage_name):
    """Cr√©e une comparaison c√¥te √† c√¥te avec des vraies images"""
    col1, col2, col3 = st.columns([5, 1, 5])
    
    with col1:
        st.image(original_img, caption="Avant", use_column_width=True)
    
    with col2:
        st.markdown("""
        <div style="text-align: center; padding-top: 50px;">
            <span style="font-size: 2rem; color: #007bff;">‚Üí</span>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.image(processed_img, caption=f"Apr√®s - {stage_name}", use_column_width=True)

def create_real_image_pipeline():
    """Interface principale pour le traitement d'images r√©elles"""
    
    st.header("üì∏ Testez avec votre propre image !")
    
    # Mode de fonctionnement
    mode = st.radio(
        "Choisissez votre mode d'exploration :",
        ["üé® Mode illustration (recommand√© pour apprendre)", "üì∑ Mode image r√©elle (testez vos photos)"]
    )
    
    if mode == "üì∑ Mode image r√©elle (testez vos photos)":
        st.info("""
        **üî¨ Mode exp√©rimental :** Uploadez une photo de fruit pour voir une simulation 
        du traitement que ferait votre mod√®le FruitVision V3 !
        """)
        
        uploaded_file = st.file_uploader(
            "Choisissez une image de fruit", 
            type=['png', 'jpg', 'jpeg'],
            help="Formats support√©s: PNG, JPG, JPEG"
        )
        
        if uploaded_file is not None:
            # Charger l'image
            original_image = Image.open(uploaded_file)
            
            st.success("‚úÖ Image charg√©e avec succ√®s !")
            
            # Afficher l'image originale
            st.subheader("üîç Votre image d'entr√©e")
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(original_image, caption="Image originale upload√©e", use_column_width=True)
            
            # Traitement √©tape par √©tape
            st.markdown("---")
            st.subheader("üîÑ Traitement √©tape par √©tape")
            
            # √âtape 1: Pr√©processing
            with st.expander("üìê √âtape 1: Pr√©processing & Normalisation", expanded=True):
                processed_img = apply_preprocessing_filters(original_image)
                create_side_by_side_comparison(original_image, processed_img, "Pr√©process√©")
                
                st.info("""
                **Transformations appliqu√©es :**
                - ‚úÖ Redimensionnement √† 100√ó100 pixels
                - ‚úÖ Normalisation de la luminosit√© (+20%)
                - ‚úÖ Am√©lioration du contraste (+10%)
                """)
            
            # √âtape 2: D√©tection de bords
            with st.expander("üîç √âtape 2: D√©tection de bords (Conv Block 1)"):
                edges_img = apply_edge_detection(processed_img)
                create_side_by_side_comparison(processed_img, edges_img, "D√©tection de bords")
                
                st.info("""
                **Ce que voient les 32 premiers filtres :**
                - üî≤ Contours de l'objet
                - üìê Lignes et formes g√©om√©triques
                - üåä Transitions entre zones de couleur
                """)
            
            # √âtape 3: Am√©lioration des caract√©ristiques
            with st.expander("üé® √âtape 3: Extraction de caract√©ristiques (Blocks 2-4)"):
                features_img = apply_feature_enhancement(processed_img)
                create_side_by_side_comparison(processed_img, features_img, "Caract√©ristiques am√©lior√©es")
                
                st.info("""
                **Extraction progressive (64‚Üí128‚Üí256 filtres) :**
                - üçé Formes sp√©cifiques aux fruits
                - üé® Patterns de couleurs et textures
                - üß† Repr√©sentations abstraites de haut niveau
                """)
            
            # √âtape 4: Classification
            with st.expander("üéØ √âtape 4: Classification finale", expanded=True):
                # Simuler une pr√©diction bas√©e sur l'image
                predictions = simulate_classification_confidence(original_image)
                
                st.markdown("**ü§ñ Pr√©diction du mod√®le FruitVision V3 :**")
                
                # Afficher les r√©sultats sous forme de barres
                for fruit, confidence in predictions.items():
                    col1, col2, col3 = st.columns([2, 6, 1])
                    
                    # √âmojis pour chaque fruit
                    fruit_emojis = {
                        "Pomme": "üçé", "Banane": "üçå", "Tomate": "üçÖ", 
                        "Concombre": "ü•í", "Citron": "üçã"
                    }
                    
                    with col1:
                        st.write(f"{fruit_emojis[fruit]} {fruit}")
                    with col2:
                        if confidence > 50:
                            st.success(f"Confiance: {confidence}%")
                        elif confidence > 10:
                            st.warning(f"Confiance: {confidence}%")
                        else:
                            st.info(f"Confiance: {confidence}%")
                        st.progress(confidence/100)
                    with col3:
                        st.write(f"{confidence}%")
                
                # R√©sultat final
                best_prediction = max(predictions, key=predictions.get)
                best_confidence = predictions[best_prediction]
                
                if best_confidence > 70:
                    st.success(f"""
                    üéâ **Pr√©diction finale : {fruit_emojis[best_prediction]} {best_prediction}** 
                    avec {best_confidence}% de confiance !
                    """)
                elif best_confidence > 40:
                    st.warning(f"""
                    ü§î **Pr√©diction probable : {fruit_emojis[best_prediction]} {best_prediction}** 
                    avec {best_confidence}% de confiance. L'image pourrait √™tre ambigu√´.
                    """)
                else:
                    st.error("""
                    ‚ùì **Pr√©diction incertaine.** L'image ne correspond pas clairement 
                    √† l'une des 5 classes apprises par le mod√®le.
                    """)
            
            # Informations techniques
            st.markdown("---")
            with st.expander("üîß Informations techniques sur le traitement"):
                st.markdown("""
                **‚ö†Ô∏è Note importante :** Cette d√©monstration utilise des filtres PIL/OpenCV 
                pour **simuler** le comportement de votre mod√®le CNN r√©el. 
                
                **Pour une int√©gration compl√®te, il faudrait :**
                
                ```python
                # Charger le mod√®le TensorFlow r√©el
                model = tf.keras.models.load_model('fruivision_v3_final.h5')
                
                # Pr√©processing exact
                img_array = tf.image.resize(image, [100, 100])
                img_array = tf.cast(img_array, tf.float32) / 255.0
                img_array = tf.expand_dims(img_array, 0)
                
                # Pr√©diction r√©elle
                predictions = model.predict(img_array)
                predicted_class = tf.argmax(predictions[0])
                ```
                
                **Avantages de cette approche actuelle :**
                - ‚úÖ D√©monstration imm√©diate sans d√©pendances lourdes
                - ‚úÖ Visualisation claire des √©tapes de traitement
                - ‚úÖ Interface √©ducative interactive
                - ‚úÖ Simulation r√©aliste du pipeline CNN
                """)
        
        else:
            st.info("üëÜ Uploadez une image pour voir la magie op√©rer !")
            
            # Montrer des exemples
            st.markdown("**üí° Conseils pour de meilleurs r√©sultats :**")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                **‚úÖ Images id√©ales :**
                - üçé Fruit bien visible
                - üí° Bon √©clairage
                - üéØ Fond simple
                - üìê Forme claire
                """)
            
            with col2:
                st.markdown("""
                **‚ö†Ô∏è √âvitez :**
                - üå´Ô∏è Images floues
                - üåë Trop sombre
                - üë• Plusieurs fruits
                - üé® Filtres appliqu√©s
                """)
            
            with col3:
                st.markdown("""
                **üéØ Classes support√©es :**
                - üçé Pommes (toutes vari√©t√©s)
                - üçå Bananes
                - üçÖ Tomates
                - ü•í Concombres
                - üçã Citrons
                """)
    
    else:
        st.info("üé® **Mode illustration activ√©** - Utilisez les sections ci-dessus pour explorer l'architecture avec des illustrations p√©dagogiques.")

# Extension de la fonction main() existante
def enhanced_main():
    """Fonction principale enrichie avec le traitement d'images r√©elles"""
    
    # ... (tout le code existant de main() reste identique) ...
    
    # Ajouter la nouvelle section apr√®s les blocs existants
    st.markdown("---")
    create_real_image_pipeline()
    
    # Section comparative
    st.header("üî¨ Comparaison : Illustration vs R√©alit√©")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üé® Mode Illustration**
        - ‚úÖ Concepts clairs et simplifi√©s
        - ‚úÖ Chargement instantan√©
        - ‚úÖ Focalis√© sur l'apprentissage
        - ‚úÖ Universel et accessible
        - ‚úÖ Pas de d√©pendances externes
        """)
    
    with col2:
        st.markdown("""
        **üì∑ Mode Image R√©elle**
        - ‚úÖ Test avec vos propres donn√©es
        - ‚úÖ Validation du mod√®le
        - ‚úÖ Exp√©rience utilisateur compl√®te
        - ‚úÖ D√©monstration concr√®te
        - ‚ö†Ô∏è R√©sultats variables selon l'image
        """)
    
    st.success("""
    **üí° Recommandation :** Commencez par le mode illustration pour comprendre les concepts, 
    puis testez avec vos propres images pour voir l'application pratique !
    """)

if __name__ == "__main__":
    enhanced_main()